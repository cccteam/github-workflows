# This workflow performs security scanning for Go projects.
#  - govulncheck-action is used to check for vulnerabilities in the Go modules
#  - trivy-action is used to check for vulnerabilities in the application's final docker image (optional)
# GitHub issues are created for failed jobs.
# A Slack message is sent (per user provided details) if either security check fails.
#
# NOTE: This workflow has required inputs. Refer to the 'inputs' & 'secrets' sections below.
name: Golang Security Scan Template
on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
      slack-channel-id:
        required: false
        type: string
        description: Overrides secrets.SLACK_CHANNEL_ID as the channel ID for sending Slack notifications for a failed scan.
      execute-trivy-scan:
        required: false
        type: boolean
        default: true
      working-directory:
        required: false
        type: string
        default: .
      docker-build-args:
        required: false
        type: string
        default: "[]" # empty array
        description: Json-formatted array of strings to pass to the docker build command as build args. e.g. '["arg1", "arg2"]'
    secrets:
      SLACK_BOT_TOKEN:
        required: true
        description: Token for sending Slack notifications for a failed scan
      SLACK_CHANNEL_ID:
        required: true
        description: Channel ID for sending Slack notifications for a failed scan. This can be overridden by the 'slack-channel-id' input.

jobs:
  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - uses: golang/govulncheck-action@v1
        with:
          go-version-input: ${{ inputs.go-version }}
          go-package: ./...
          work-dir: ${{ inputs.working-directory }}

  trivyscan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    if: ${{ inputs.execute-trivy-scan }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Prepare Docker build args
        id: prepare-build-args
        run: |
          build_args='${{ inputs.docker-build-args }}'
          build_args=$(echo $build_args | jq -r '.[] | "--build-arg " + .' | xargs)
          echo "BUILD_ARGS=$build_args" >> $GITHUB_ENV

      - name: Build docker image
        run: |
          repo_name=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV
          docker build $BUILD_ARGS -t $repo_name:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REPO_NAME }}:latest"
          format: "table"
          exit-code: "1"
          vuln-type: "os,library"
          severity: "LOW,MEDIUM,HIGH,CRITICAL"

  create_issues:
    name: Create issues for failed jobs
    runs-on: ubuntu-latest
    needs: [govulncheck, trivyscan]
    if: always() && (needs.govulncheck.result == 'failure' || needs.trivyscan.result == 'failure')
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            async function createIssue(jobName) {
              const title = `${jobName} job failed in Security Scan workflow`;
              const label = jobName;

              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
                labels: `automated issue,${label}`
              });
              
              const createNewIssue = !issues.find(issue => issue.title === title);
              if (createNewIssue) {
                const issue = {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: `The ${jobName} job failed in the Security Scan workflow. Please investigate.`,
                  labels: ["automated issue", label]
                };
                github.rest.issues.create(issue).then(createdIssue => {
                  console.log(`Issue ${createdIssue.data.number} was created for failed job: ${jobName}.`);
                });
              }
            }

            if ('${{ needs.govulncheck.result }}' == 'failure') {
              createIssue("govulncheck");
            }

            if ('${{ needs.trivyscan.result }}' == 'failure') {
              createIssue("trivyscan");
            }

  slack_notification:
    name: Send Slack notification for failed jobs
    runs-on: ubuntu-latest
    needs: [govulncheck, trivyscan]
    if: always() && (needs.govulncheck.result == 'failure' || needs.trivyscan.result == 'failure')
    steps:
      - uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ inputs.slack-channel-id || secrets.SLACK_CHANNEL_ID }}
          slack-message: "URGENT! The security scan failed for the *${{ github.repository }}* repository. Check the logs at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
