name: Golang Workflow Template
on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
      build-tags:
        required: true
        type: string # containing Json-formatted array of strings, e.g. "['', 'tag1', 'tag2', 'tag1,tag3']"

jobs:
  tests-and-builds:
    name: Run tests and builds
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-tags: fromJson(${{ inputs.build-tags }})
    steps:
      - name: Set up Go ${{ inputs.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Check for go generate changes
        if: ${{ matrix.build-tags == fromJson(inputs.build-tags[0]) }}
        run: |
          go install github.com/golang/mock/mockgen@latest
          go generate ./...
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Changes were found after running go generate. Please run it and commit the changes."
            git diff
            exit 1
          fi

      - name: Run tests with race detection
        run: go test ${{ matrix.build-tags != '' && format('-tags {0}', matrix.build-tags) || '' }} -v -race ./...

      - name: Run build
        run: go build ${{ matrix.build-tags != '' && format('-tags {0}', matrix.build-tags) || '' }}

  govulncheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - uses: golang/govulncheck-action@v1
        with:
          go-version-input: ${{ inputs.go-version }}
          go-package: ./...

  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - uses: actions/checkout@v4

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
          only-new-issues: true
