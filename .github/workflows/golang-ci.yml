# This Continuous Integration (CI) workflow template can be used in repositories that contain Go code.
#
# The following jobs are included:
#  * go-generate-diff: Checks if files generated via 'go generate' are up-to-date
#  * tests-and-builds: Runs all tests and builds the code
#  * govulncheck: Checks for known vulnerabilities in the Go dependencies
#  * linter: Runs golangci-lint
#
# NOTE: Certain inputs are required, as detailed in the "inputs" section below.

name: Golang CI Workflow Template
on:
  workflow_call:
    inputs:
      working-directory:
        required: false
        type: string
        default: "."
      build-tags:
        required: true
        type: string # containing Json-formatted array of strings, e.g. '["", "tag1", "tag2", "tag1,tag3"]'
      golangci-lint-version:
        required: false
        type: string
        default: "v1.56"
      golangci-lint-timeout:
        required: false
        type: string
        default: "5m"
      golangci-lint-only-new-issues:
        required: false
        type: boolean
        default: false

jobs:
  go-generate-diff:
    name: Check for go generate changes
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go for app
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.working-directory }}/go.mod
          cache-dependency-path: ${{ inputs.working-directory }}/go.sum

      - name: Install mockgen
        run: go install go.uber.org/mock/mockgen@latest

      - name: Run go generate
        run: go generate ./...
        working-directory: ${{ inputs.working-directory }}

      - name: Check for go generate changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Changes were found after running go generate. Please run it and commit the changes."
            git diff # This will show the changes in the Action's log
            exit 1
          fi

  tests-and-builds:
    name: Run tests and builds
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-tag: ${{ fromJson(inputs.build-tags) }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go for app
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.working-directory }}/go.mod
          cache-dependency-path: ${{ inputs.working-directory }}/go.sum

      - name: Run tests with race detection
        run: go test ${{ matrix.build-tag != '' && format('-tags {0}', matrix.build-tag) || '' }} -v -race ./...
        working-directory: ${{ inputs.working-directory }}

      - name: Run build
        run: go build ${{ matrix.build-tag != '' && format('-tags {0}', matrix.build-tag) || '' }}
        working-directory: ${{ inputs.working-directory }}

  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      # NOTE: Repo checkout and go setup are handled within 'govulncheck-action'
      - uses: golang/govulncheck-action@v1
        with:
          go-version-file: ${{ inputs.working-directory }}/go.mod
          go-package: ./...
          work-dir: ${{ inputs.working-directory }}

  linter:
    name: Run golangci-lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-tag: ${{ fromJson(inputs.build-tags) }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go for app
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.working-directory }}/go.mod
          cache-dependency-path: ${{ inputs.working-directory }}/go.sum

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          # The version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: ${{ inputs.golangci-lint-version }}

          args: --timeout ${{ inputs.golangci-lint-timeout }} --verbose ${{ matrix.build-tag != '' && format('--build-tags {0}', matrix.build-tag) || '' }}

          # Show only new issues if it's a pull request
          only-new-issues: ${{ inputs.golangci-lint-only-new-issues }}

          working-directory: ${{ inputs.working-directory }}
