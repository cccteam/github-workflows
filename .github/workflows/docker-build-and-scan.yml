# This Continuous Integration (CI) workflow template can be used in repositories that include a Dockerfile.
#
# The included jobs are:
#  - lint-and-build: Lints the Dockerfile using the hadolint linter and builds the Docker image.
#  - trivy-scan: Scans the Docker image for vulnerabilities using the Trivy vulnerability scanner.

name: Build & Scan Docker Image
on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
      docker-build-args:
        required: false
        type: string
        default: "[]" # empty array
        description: Json-formatted array of strings to pass to the docker build command as build args. e.g. '["arg1", "arg2"]'
      vuln-types:
        required: false
        type: string
        default: "os,library"
        description: Comma-separated list of vulnerability types to scan for. e.g. 'os,library'
      ignore-unfixed:
        required: false
        type: boolean
        default: false
        description: Ignore unfixed vulnerabilities
      severity:
        required: false
        type: string
        default: "LOW,MEDIUM,HIGH,CRITICAL"
        description: Comma-separated list of severities to fail the workflow on. e.g. 'LOW,MEDIUM,HIGH,CRITICAL'

jobs:
  lint-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code repository
        uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: "Dockerfile"

      - name: Prepare Docker build args
        id: prepare-build-args
        run: |
          build_args='${{ inputs.docker-build-args }}'
          build_args=$(echo $build_args | jq -r '.[] | "--build-arg " + .' | xargs)
          echo "BUILD_ARGS=$build_args" >> $GITHUB_ENV

      - name: Build docker image
        run: |
          repo_name=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV
          docker build $BUILD_ARGS -t $repo_name:latest .

  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REPO_NAME }}:latest"
          format: "table"
          exit-code: "1"
          ignore-unfixed: "${{ inputs.ignore-unfixed }}"
          vuln-type: "${{ inputs.vuln-types }}"
          severity: "${{ inputs.severity }}"
